generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.3.2")]
}

model Person {
  id    String  @id @default(uuid())
  email String  @unique
  name  String?

  items    Item[]
  memberOf Member[]
}

model Group {
  id String @id @default(uuid())

  name String @unique

  members Member[]

  catalogs    Catalog[]
  collections Collection[]
}

enum Role {
  CONTRIBUTOR
  READER
}

enum Access {
  PUBLIC
  PRIVATE
}

model Member {
  person   Person @relation(fields: [personId], references: [id])
  personId String
  group    Group  @relation(fields: [groupId], references: [id])
  groupId  String

  role Role

  @@id([personId, groupId])
}

// STAC Item
model Item {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   Person? @relation(fields: [ownerId], references: [id])
  ownerId String?

  projectNumber String
  title         String
  location      String
  description   String?
  license       String?
  keywords      Keyword[]

  // STAC Props
  geometry   Unsupported("geometry")? // Required, but making it optional allows for prisma.create queries
  dateTime   DateTime?
  startTime  DateTime?
  endTime    DateTime?
  properties Json?
  assets     Json? // Dictionary of downloads

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  @@index([geometry], name: "location_idx", type: Gist)
}

// STAC Catalog
model Catalog {
  id String @id @default(uuid())

  title       String?
  description String
  links       Json?

  linkedCatalogs Catalog[] @relation(name: "LinkedCatalogs")
  inCatalogs     Catalog[] @relation(name: "LinkedCatalogs")

  collections Collection[]

  access Access  @default(PRIVATE)
  groups Group[]
}

model ExternalCatalog {
  url String @id

  title String?
}

// STAC Collection
model Collection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?

  geometry  Unsupported("geometry")?
  startTime DateTime?
  endTime   DateTime?

  items Item[]

  catalog   Catalog @relation(fields: [catalogId], references: [id])
  catalogId String

  access Access  @default(PRIVATE)
  groups Group[]
}

model Keyword {
  id String @id @default(uuid())

  parent   Keyword?  @relation("parent-child", fields: [parentId], references: [id])
  parentId String?
  children Keyword[] @relation("parent-child")

  title       String
  description String?

  standard   Standard? @relation(fields: [standardId], references: [id])
  standardId String?

  items Item[]
}

model Standard {
  id String @id @default(uuid())

  name        String
  description String?

  keywords Keyword[]
}
