on:
  push:
    branches:
      - main
      - deployment
  pull_request:

# GitHub Actions workflow to deploy to Azure using azd
# To configure required secrets for connecting to Azure, simply run `azd pipeline config`

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  contents: read
  issues: read
  id-token: write
  actions: write
  checks: write
  pull-requests: write

jobs:
  testPythonSDK:
    name: Test Python SDK
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/remix'
      SESSION_SECRET: super-duper-s3cret
      NODE_VERSION: 18
      PYTHON_VERSION: 3.9
      POETRY_VERSION: 1.6.1
      AZURE_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ vars.AZURE_APP_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_APP_CLIENT_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      #----------------------------------------#
      #       Install & configure Poetry       #
      #----------------------------------------#
      - name: Load cached Poetry Binary
        id: cached-poetry-binary
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ env.POETRY_VERSION }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------#
      #       Load cached venv if cache exists       #
      #----------------------------------------------#
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          # Restore cache with this prefix if not exact match with key
          # Note cache-hit returns false in this case, so the below step will run
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
      #----------------------------------------------------------#
      #       Install dependencies if cache does not exist       #
      #----------------------------------------------------------#
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        shell: bash
        working-directory: utils/data_management_suite_sdk
        run: poetry install --no-interaction --no-root

      - uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run webserver and db container
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d

      - name: Run tests
        working-directory: utils/data_management_suite_sdk
        run: |
          source .venv/bin/activate
          python -m pytest tests/ --junit-xml=test-results.xml

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            utils/data_management_suite_sdk/test-results.xml
            utils/data_management_suite_sdk/test-results/**/*.xml
            utils/data_management_suite_sdk/test-results/**/*.json

  end2endtest:
    name: End 2 end test
    timeout-minutes: 10
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgis/postgis:15-3.3
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: remix
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    env:
      DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/remix'
      SESSION_SECRET: super-duper-s3cret
      NODE_VERSION: 18

    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1

      - name: üõ† Setup Database
        run: npx prisma migrate reset --force

      - name: üå± Seed the Database
        run: npx prisma db seed

      - name: ‚öôÔ∏è Build
        run: npm run build

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx remix-serve build & npx playwright test
        env:
          AZURE_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_APP_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_APP_CLIENT_SECRET }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  provision:
    runs-on: ubuntu-latest
    needs: end2endtest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the infra directory.
        working-directory: ./infra
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AZURE_ENV_NAME: dev
      RS_RESOURCE_GROUP: ${{ secrets.RS_RESOURCE_GROUP }}
      RS_STORAGE_ACCOUNT: ${{ secrets.RS_STORAGE_ACCOUNT }}
      RS_CONTAINER_NAME: ${{ secrets.RS_CONTAINER_NAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      AZURE_APP_CLIENT_ID: ${{ secrets.AZURE_APP_CLIENT_ID }}
      AZURE_APP_CLIENT_SECRET: ${{ secrets.AZURE_APP_CLIENT_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.7'

      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="storage_account_name=${{ env.RS_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ env.RS_CONTAINER_NAME }}" \
          -backend-config="key=data-management-suite/${{ env.AZURE_ENV_NAME }}/azdremotestate.tfstate" \
          -backend-config="resource_group_name=${{ env.RS_RESOURCE_GROUP }}"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_location: ${{ vars.AZURE_LOCATION }}
          TF_VAR_environment_name: ${{ env.AZURE_ENV_NAME }}
          TF_VAR_database_password: ${{ env.DATABASE_PASSWORD }}
          TF_VAR_session_secret: ${{ env.SESSION_SECRET }}
          TF_VAR_app_client_id: ${{ env.AZURE_APP_CLIENT_ID }}
          TF_VAR_app_client_secret: ${{ env.AZURE_APP_CLIENT_SECRET }}
          TF_VAR_web_app_exists: true
        run: terraform apply -auto-approve -input=false

      - name: Get outputs
        uses: dflook/terraform-output@v1
        id: outputs

    outputs:
      azure_container_registry_name: ${{ steps.outputs.outputs.azure_container_registry_name }}
      container_app_name: ${{ steps.outputs.outputs.container_app_name }}
      resource_group_name: ${{ steps.outputs.outputs.resource_group_name }}
      container_app_environment_name: ${{ steps.outputs.outputs.container_app_environment_name }}
      web_container_name: ${{ steps.outputs.outputs.web_container_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: provision
    env:
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - name: Build and deploy Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}
          acrName: ${{ needs.provision.outputs.azure_container_registry_name }}
          containerAppName: ${{ needs.provision.outputs.container_app_name }}
          resourceGroup: ${{ needs.provision.outputs.resource_group_name }}
          containerAppEnvironment: ${{ needs.provision.outputs.container_app_environment_name }}
          imageToBuild: ${{ needs.provision.outputs.azure_container_registry_name }}.azurecr.io/data-management-suite/web-${{ vars.AZURE_ENV_NAME }}:${{ github.sha }}
