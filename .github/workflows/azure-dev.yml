on: push

# GitHub Actions workflow to deploy to Azure using azd
# To configure required secrets for connecting to Azure, simply run `azd pipeline config`

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  end2endtest:
    name: End 2 end test
    timeout-minutes: 10
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgis/postgis:15-3.3
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: remix
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/remix"
      SESSION_SECRET: super-duper-s3cret
      NODE_VERSION: 18

    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì• Download deps
        uses: bahmutov/npm-install@v1

      - name: üõ† Setup Database
        run: npx prisma migrate reset --force

      - name: üå± Seed the Database
        run: npx prisma db seed

      - name: ‚öôÔ∏è Build
        run: npm run build

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx remix-serve build & npx playwright test
        env:   
          AZURE_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_APP_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_APP_CLIENT_SECRET }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: end2endtest
    if: github.ref == 'refs/heads/main'
    env:
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install azd
        uses: Azure/setup-azd@v0.1.0

      - name: Install Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Log in with Azure (Client Credentials)
        run: |
          $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
          Write-Host "::add-mask::$($info.clientSecret)"

          azd auth login `
            --client-id "$($info.clientId)" `
            --client-secret "$($info.clientSecret)" `
            --tenant-id "$($info.tenantId)"
        shell: pwsh
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Enable terraform alpha feature
        run: azd config set alpha.terraform on

      - name: Provision Infrastructure
        run: azd provision --no-prompt
        env:
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          RS_RESOURCE_GROUP: ${{ vars.RS_RESOURCE_GROUP }}
          RS_STORAGE_ACCOUNT: ${{ vars.RS_STORAGE_ACCOUNT }}
          RS_CONTAINER_NAME: ${{ vars.RS_CONTAINER_NAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          AZURE_APP_CLIENT_ID: ${{ vars.AZURE_APP_CLIENT_ID }}
          AZURE_APP_CLIENT_SECRET: ${{ secrets.AZURE_APP_CLIENT_SECRET }}

      - name: Deploy Application
        run: azd deploy --no-prompt
        env:
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

          
